(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1597455832375;

	const files = [
		"/service-worker-index.html",
		"/.DS_Store",
		"/amazon.png",
		"/att.svg",
		"/cal.svg",
		"/cambridge.svg",
		"/counterintuitive-properties-of-high-dimensional-space/Figure1.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure10.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure11.gif",
		"/counterintuitive-properties-of-high-dimensional-space/Figure12.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure13.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure14.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure15.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure2.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure3.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure4.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure5.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure6.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure7.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure8.png",
		"/counterintuitive-properties-of-high-dimensional-space/Figure9.png",
		"/cv.pdf",
		"/favicon.png",
		"/global.css",
		"/hobbies/.DS_Store",
		"/hobbies/cycling.jpg",
		"/hrt.svg",
		"/intel.svg",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json",
		"/me.jpg",
		"/metrinity.jpg",
		"/microsoft.svg",
		"/numerical-algorithms-for-computing-eigenvectors/CrossSection1.png",
		"/numerical-algorithms-for-computing-eigenvectors/CrossSection2.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure1.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure1b.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure1c.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure1d.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure1v2.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure2.gif",
		"/numerical-algorithms-for-computing-eigenvectors/Figure3.gif",
		"/numerical-algorithms-for-computing-eigenvectors/Figure4.gif",
		"/numerical-algorithms-for-computing-eigenvectors/Figure5.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure6.png",
		"/numerical-algorithms-for-computing-eigenvectors/Figure7.gif",
		"/numerical-algorithms-for-computing-eigenvectors/Figure7v2.gif",
		"/numerical-algorithms-for-computing-eigenvectors/FigureX.png",
		"/osu.svg",
		"/publications/.DS_Store",
		"/publications/advtrain-thumbnail.jpg",
		"/publications/approxtri-thumbnail.jpg",
		"/publications/boxdim.gif",
		"/publications/finance256.gif",
		"/publications/finance256.jpg",
		"/publications/fixedpt.png",
		"/publications/flowfields.png",
		"/publications/fractal.pdf",
		"/publications/geomae-thumbnail.jpg",
		"/publications/learning-geometric-features-supplement.pdf",
		"/publications/learning-geometric-features-thumbnail.jpg",
		"/publications/learning-geometric-features.pdf",
		"/publications/mars.pdf",
		"/publications/opt-thumbnail.jpg",
		"/publications/poster1_vis12.pdf",
		"/publications/postersummary1_vis12.pdf",
		"/publications/rcdt.png",
		"/publications/srp.png",
		"/publications/streamlines.pdf",
		"/publications/thesis.pdf",
		"/twitter.png"
	];

	const shell = [
		"/client/client.913bfe8f.js",
		"/client/index.3f655c04.js",
		"/client/publications.fe536608.js",
		"/client/hobbies.7b5c1cbb.js",
		"/client/index.9c5cb814.js",
		"/client/[slug].ffee8ad1.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
