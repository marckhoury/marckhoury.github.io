h2.svelte-1jwipjp{font-size:2em;font-weight:300;margin-bottom:1rem}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */